// === story.js ===
// –£–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Å—Ç–æ—Ä–∏–µ–π –∏ –∑–∞–≥—Ä—É–∑–∫–æ–π InkJS

let story;

function loadStory() {
  try {
    console.log("üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é...");
    story = new inkjs.Story(storyContent);
    console.log("‚úÖ –ò—Å—Ç–æ—Ä–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞:", story);
    return true;
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏:", error);
    alert("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.");
    return false;
  }
}

function continueStory() {
  try {
    if (!story || !story.canContinue) return;
    
    let newText = [];
    let lastImage = null;

    while (story.canContinue) {
      const paragraphText = story.Continue();
      console.log("üìù –î–æ–±–∞–≤–ª–µ–Ω —Ç–µ–∫—Å—Ç:", paragraphText);
      newText.push(paragraphText);

      if (story.currentTags) {
        story.currentTags.forEach(tag => {
          if (tag.startsWith("IMAGE:")) {
            lastImage = tag.replace("IMAGE:", "").trim();
            console.log("üñº –ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:", lastImage);
          }
        });
      }
    }

    if (lastImage) {
      displayImage(lastImage);
    }

    newText.forEach(text => {
      addParagraphToStory(text);
    });

    processChoices();
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏—Å—Ç–æ—Ä–∏–∏:", error);
    alert("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –∏—Å—Ç–æ—Ä–∏–∏. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫.");
    restartStory();
  }
}

function restartStory() {
  console.warn("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é...");
  localStorage.removeItem(STORAGE_KEY);
  loadStory();
  continueStory();
}
